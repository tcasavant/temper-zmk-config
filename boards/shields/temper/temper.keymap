/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Include ZMK Nodefree config from https://github.com/urob/zmk-helpers/tree/main
#include "../../../zmk-nodefree-config/helper.h"

#define DEFAULT 0
#define NUM 1
#define SYM 2
#define NAV 3
#define FUN 4

/* Conditional layers */
ZMK_CONDITIONAL_LAYER(NUM SYM, FUN)


/* Behaviors */
// left-hand HRMs
ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

// right-hand HRMs
ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)


/* Combos */
ZMK_COMBO(esc, &kp ESC, 13 16)
ZMK_COMBO(caps_word, &caps_word, 10 19)
ZMK_COMBO(apostrophe, &kp APOS, 18 19)


/* Layers */
ZMK_LAYER(default_layer,
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
            &kp Q         &kp W         &kp E         &kp R          &kp T                           &kp Y        &kp U         &kp I         &kp O         &kp P
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
            &hml LSHIFT A   &hml LCTL S   &hml LALT D   &hml LGUI F  &kp G                            &kp H        &hmr RALT J         &hmr RALT K         &hmr RCTL L       &hmr RSHIFT SEMI
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
            &kp Z         &kp X         &kp C         &kp V          &kp B                           &kp N        &kp M       &kp COMMA      &kp DOT      &mt LCTL FSLH
    // ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤                ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                    &mt LGUI ESC      &lt NUM TAB     &mt LSHIFT BSPC                   &lt              NAV SPACE      &lt SYM RET     &kp RALT
    //                         ╰─────────────┴─────────────┴─────────────╯              ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(num_layer,
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &none       &none      &none      &none     &none                                           &none       &kp N7        &kp N8        &kp N9      &kp COMMA
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &hml LSHIFT ESC      &hml LCTL MINUS   &hml LALT PLUS  &hml LGUI EQUAL  &kp HASH            &none       &hmr RGUI N4    &hmr RALT N5   &hmr RCTL N6  &hmr RSHIFT DOT
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &none     &none       &kp STAR      &none       &none                                       &none      &kp N1        &kp N2        &kp N3      &kp EQUAL
    // ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                        &trans        &trans        &trans            &trans        &kp N0        &trans
    //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(sym_layer,
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &kp APOS       &kp LT       &kp GT      &kp DQT     &kp DOT                                          &kp AMPS       &none        &kp LBKT        &kp RBKT      &kp PRCNT
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &hml LSHIFT EXCL      &hml LCTL MINUS      &hml LALT PLUS     &hml LGUI EQUAL    &kp UNDER           &kp PIPE       &hmr RGUI COLON        &hmr RALT LPAR        &hmr RCTL RPAR      &hmr RSHIFT QMARK
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &kp CARET     &kp FSLH     &kp STAR     &kp BSLH    &kp HASH                                         &kp TILDE      &kp DLLR        &kp LBRC        &kp RBRC      &kp AT
    // ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                        &trans        &trans        &trans            &trans        &trans        &trans
    //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(nav_layer,
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
            &none        &none        &none        &none        &none            &none       &none           &none       &none     &none
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &hml LSHIFT ESC     &sk LCTRL      &sk LALT      &sk LGUI      &none           &kp LEFT      &kp DOWN       &kp UP      &kp RIGHT   &none
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
            &none       &none        &none        &none        &none            &kp HOME        &none       &none        &kp END    &none
    // ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                        &trans        &kp DEL       &trans            &trans        &trans        &trans
    //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(fun_layer,
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &none   &kp K_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &out OUT_TOG         &trans        &kp F7        &kp F8        &kp F9       &kp F12
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4         &trans        &kp F4        &kp F5        &kp F6       &kp F11
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &bt BT_CLR    &kp C_PREV     &kp C_PP     &kp C_NEXT      &trans            &trans        &kp F1        &kp F2        &kp F3       &kp F10
    // ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                        &trans        &trans        &trans            &trans        &trans        &trans
    //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)


// / {
//     conditional_layers {
//         compatible = "zmk,conditional-layers";
//         tri_layer {
//             if-layers = <NUM SYM>;
//             then-layer = <FUN>;
//         };
//     };
//     behaviors {

//     };
//     combos {
//         compatible = "zmk,combos";
//         combo_esc {
//             timeout-ms = <50>;
//             key-positions = <13 16>;
//             bindings = <&kp ESC>;
//         };
//         combo_caps_word {
//             timeout-ms = <50>;
//             key-positions = <10 19>;
//             bindings = <&caps_word>;
//         };
//         combo_apos {
//             timeout-ms = <50>;
//             key-positions = <18 19>;
//             bindings = <&kp APOS>;
//         };
//     };
//         keymap {
//                 compatible = "zmk,keymap";

//                 default_layer {
//                         bindings = <

// // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
//         &kp Q         &kp W         &kp E         &kp R         &kp T              &kp Y        &kp U         &kp I         &kp O         &kp P
// // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//         &kp A         &kp S         &kp D         &kp F         &kp G              &kp H        &kp J         &kp K         &kp L       &kp SEMI
// // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//         &kp Z         &kp X         &kp C         &kp V         &kp B              &kp N        &kp M       &kp COMMA      &kp DOT      &mt LCTL FSLH
// // ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
//                 &mt LGUI ESC      &lt NUM TAB     &mt LSHIFT BSPC        &lt NAV SPACE      &lt SYM RET     &kp RALT
// //                         ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
//                         >;
//                 };
//                 num_layer {
//                         bindings = <
// // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
//       &none       &none      &none      &none     &none              &none       &kp N7        &kp N8        &kp N9      &kp COMMA
// // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//       &none      &kp MINUS   &kp PLUS  &kp EQUAL  &kp HASH            &none       &kp N4        &kp N5        &kp N6      &kp DOT
// // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//       &none     &none       &kp STAR      &none       &none           &none      &kp N1        &kp N2        &kp N3      &kp EQUAL
// // ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
//                                     &trans        &trans        &trans            &trans        &trans        &kp N0
// //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
//                         >;
//                 };
//                 sym_layer {
//                         bindings = <
// // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
//       &kp APOS       &kp LT       &kp GT      &kp DQT     &kp DOT               &kp AMPS       &none        &kp LBKT        &kp RBKT      &kp PRCNT
// // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//       &kp EXCL      &kp MINUS      &kp PLUS     &kp EQUAL    &kp UNDER         &kp PIPE       &kp COLON        &kp LPAR        &kp RPAR      &kp QMARK
// // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//       &kp CARET     &kp FSLH     &kp STAR     &kp BSLH    &kp HASH          &kp TILDE      &kp DLLR        &kp LBRC        &kp RBRC      &kp AT
// // ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
//                                     &trans        &trans        &trans            &trans        &trans        &trans
// //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
//                         >;
//                 };

//                 nav_layer {
//                         bindings = <
// // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
//         &none        &none        &none        &none        &none            &none       &none           &none       &none     &none
// // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//       &gresc     &sk LCTRL      &sk LALT      &sk LGUI      &none           &kp LEFT      &kp DOWN       &kp UP      &kp RIGHT   &none
// // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//         &none       &none        &none        &none        &none            &kp HOME        &none       &none        &kp END    &none
// // ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
//                                     &trans        &kp DEL       &trans            &trans        &trans        &trans
// //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
//                         >;
//                 };

//                 fun_layer {
//                         bindings = <
// // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
//      &none   &kp K_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &out OUT_TOG         &trans        &kp F7        &kp F8        &kp F9       &kp F12
// // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4         &trans        &kp F4        &kp F5        &kp F6       &kp F11
// // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//       &bt BT_CLR    &kp C_PREV     &kp C_PP     &kp C_NEXT      &trans            &trans        &kp F1        &kp F2        &kp F3       &kp F10
// // ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
//                                     &trans        &trans        &trans            &trans        &trans        &trans
// //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
//                         >;
//                 };
//         };
// };
